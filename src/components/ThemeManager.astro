---
// Theme Manager Component
// The theme on kollitsch.dev is managed by adding a `data-theme` attribute to
// the `<html>` element which can have the values `light`, or `dark`

type Props = {
  defaultTheme?: ThemeMode;
};

const { defaultTheme = 'dark' } = Astro.props;
---

<script is:inline data-default-theme={defaultTheme}>

  window.theme ??= (() => {
    const defaultTheme =
      document.currentScript.getAttribute('data-default-theme');
    const storageKey = 'kdev-theme';
    const store =
      typeof localStorage !== 'undefined'
        ? localStorage
        : { getItem: () => null, setItem: () => {} };

    // https://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia
    const mediaMatcher = window.matchMedia('(prefers-color-scheme: dark)');
    let systemTheme = mediaMatcher.matches ? 'dark' : 'light';
    mediaMatcher.addEventListener('change', event => {
      systemTheme = event.matches ? 'dark' : 'light';
      applyTheme(theme.getTheme());
    });

    function applyTheme(theme) {
      // @todo should `auto` be `dark` maybe?
      const resolvedTheme = theme === 'auto' ? systemTheme : theme;
      document.documentElement.dataset.theme = resolvedTheme;
      document.documentElement.style.colorScheme = resolvedTheme;

      changeGiscusTheme(theme);

      document.dispatchEvent(
        new CustomEvent('theme-changed', {
          detail: { theme, systemTheme, defaultTheme },
        }),
      );
    }

    function setTheme(theme = defaultTheme) {
      store.setItem(storageKey, theme);
      applyTheme(theme);
    }

    function resetTheme() {
      store.removeItem(storageKey);
    }

    function getTheme() {
      return store.getItem(storageKey) || defaultTheme;
    }

    function getSystemTheme() {
      return systemTheme;
    }

    function getDefaultTheme() {
      return defaultTheme;
    }

    return { 
      setTheme, 
      getTheme, 
      getSystemTheme, 
      getDefaultTheme,
      resetTheme,
    };

  })();

  theme.setTheme(theme.getTheme());

  // @todo Giscus offers a `dark` and `light` theme, if we want to use a custom 
  // theme we need to explicitly set it instead of just passing the theme.
  function changeGiscusTheme(theme = 'dark') {
    function sendMessage(message) {
      const iframe = document.querySelector('iframe.giscus-frame');
      if (!iframe) return;
      iframe.contentWindow.postMessage(
        { giscus: message },
        'https://giscus.app',
      );
    }
    sendMessage({
      setConfig: {
        theme: theme,
      },
    });
  }

  document.addEventListener('astro:after-swap', () =>
    window.theme.setTheme(window.theme.getTheme()),
  );

</script>
