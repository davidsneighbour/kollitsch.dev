---
import type { CollectionEntry } from 'astro:content';
import type { ImageMetadata } from 'astro';

import { resolveCover } from '@utils/images';
import { getTailwindSizes } from '@utils/tailwind';
import { Picture } from 'astro:assets';
import { log } from '@utils/debug';

interface Props {
  post: CollectionEntry<'blog'>;
  link?: string;
  classes?: string;
  quality?: 'low' | 'medium' | 'high' | 'max' | number; // map to 30/60/82/95 or use number directly
  widths?: number[];
  formats?: Array<'avif' | 'webp' | 'png' | 'jpeg'>;
  sizes?: string;
  layout?: 'fixed' | 'constrained' | 'full-width';
}

const {
  post,
  link,
  classes = 'w-full max-w-full h-auto mb-4 z-20',
  quality = 'high',
  widths = [640, 768, 1024, 1280, 1536],
  formats = ['avif', 'webp', 'jpeg'],
  sizes = getTailwindSizes({ base: 3, sm: 1, md: 2, maxContentWidth: 1280 }),
  layout = 'constrained',
}: Props = Astro.props;

function mapQuality(q: Props['quality']): number {
  if (typeof q === 'number') {
    return Math.max(1, Math.min(100, q));
  }
  switch (q) {
    case 'low':
      return 30;
    case 'medium':
      return 60;
    case 'high':
      return 82;
    case 'max':
      return 95;
    default:
      return 82;
  }
}

log.start();
log.debug('POSTIMAGE GENERATION ###########################################');
log.debug('COVER CONFIG', post.data.cover);

const cover = resolveCover(post);
log.debug('COVER RESOLVED', cover);

let imageMeta: ImageMetadata | null =
  cover.type === 'image' && cover.meta ? cover.meta : null;

log.debug('IMAGE META RESOLVED', imageMeta);
log.debug('POSTIMAGE GENERATION ENDED######################################');
log.stop();
---

{
  cover.type === 'video' && cover.video ? (
    <figure class="group relative isolate z-10">
      <div class={`aspect-2/1 overflow-hidden ${classes}`}>
        <lite-youtube
          videoid={cover.video.youtube}
          class="z-20 mb-4 h-auto w-full max-w-full"
        />
      </div>
      <script
        src="/vendor/lite-youtube-embed/lite-yt-embed.js"
        type="module"
        is:inline
      />
      <figcaption class="absolute right-0 bottom-0 left-0 z-30 bg-gray-950/80 text-center text-orange-50/90 opacity-0 transition-all delay-100 duration-600 ease-in-out group-hover:opacity-100">
        {cover.video.title}
      </figcaption>
    </figure>
  ) : cover.type === 'image' ? (
    <figure class="group relative isolate z-10">
      {link ? (
        <a href={link}>
          {imageMeta ? (
            <Picture
              src={imageMeta}
              alt={cover.alt}
              formats={formats}
              widths={widths}
              sizes={sizes}
              layout={layout}
              class={classes}
              quality={mapQuality(quality)}
              priority
            />
          ) : (
            // Fallback for remote or non-indexed images: raw <img>
            <img
              src={cover.src}
              alt={cover.alt}
              class={classes}
              loading="eager"
              decoding="async"
            />
          )}
        </a>
      ) : (
        <>
          {imageMeta ? (
            <Picture
              src={imageMeta}
              alt={cover.alt}
              formats={formats}
              widths={widths}
              sizes={sizes}
              layout={layout}
              class={classes}
              quality={mapQuality(quality)}
              priority
            />
          ) : (
            <img
              src={cover.src}
              alt={cover.alt}
              class={classes}
              loading="eager"
              decoding="async"
            />
          )}
        </>
      )}

      {cover.title && (
        <figcaption
          transition:animate="slide"
          set:html={cover.title}
          class="absolute right-0 bottom-0 left-0 z-30 bg-gray-950/80 text-center text-orange-50/90 opacity-0 transition-all delay-100 duration-600 ease-in-out group-hover:opacity-100"
        />
      )}
    </figure>
  ) : null
}
