#!/bin/bash

REQUIRED_TOOLS=(
	git
	curl
)

for TOOL in "${REQUIRED_TOOLS[@]}"; do
	if ! command -v "${TOOL}" >/dev/null; then
		echo "${TOOL} is required... "
		exit 1
	fi
done

VERSION=$(node -pe 'require("./package.json")["version"]')

FILE=.env
if [ -f "$FILE" ]; then
	echo "exporting .env"
	set -a # export all variables created next
	# this routine ranges through a folder of files that we don't explicitly know (@davidsneighbour)
	# see https://github.com/koalaman/shellcheck/wiki/SC1090
	# shellcheck source=/dev/null
	source "${FILE}"
	set +a # stop exporting
fi

# update version in citation configuration
FILE=CITATION.cff
if test -f "$FILE"; then
	sed -i "s/^version: .*/version: ${VERSION}/" $FILE
	DATE=$(date +%F)
	sed -i "s/date-released: .*/date-released: ${DATE}/" $FILE
	git add $FILE
fi

# retrieve component state
echo "retrieving component state..."
./bin/build/components-releases
echo "done"

# adding data directory for new build information
git add data/dnb
git commit --signoff --amend --no-edit --quiet

# push release to GitHub
git push origin main --follow-tags --quiet
git push origin --tags --quiet

# create a release on GitHub
BODY="Just a new release"

URL="$GITHUB_REPO""releases/edit/v""$VERSION"
curl \
	-X POST \
	-H "Accept: application/vnd.github+json" \
	-H "Authorization: token ${GITHUB_SECRET}" \
	https://api.github.com/repos/"${GITHUB_REPOSLUG}"/releases \
	-d "{\"tag_name\":\"v${VERSION}\",\"name\":\"v${VERSION}\",\"body\":\"${BODY}\",\"draft\":false,\"prerelease\":false,\"generate_release_notes\":false}"

# open page to edit
xdg-open "${URL}" &>>/dev/null

# get the release info into the static directory
# AUTH="-u ${GITHUB_USERNAME}:${GITHUB_SECRET}"
# URL="https://api.github.com/repos/${GITHUB_REPOSLUG}/releases/latest"
# 	curl "${URL}" "${AUTH}" --output ./static/assets/build.json
# git add static/assets/build.json
# git commit -m git commit -m
# git push origin --tags --quiet
