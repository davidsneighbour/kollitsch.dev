---
import { Icon } from 'astro-icon/components';
import networks from '@content/social.json';

interface Props {
  title: string;
  description: string;
  via?: string;
}

const shareNetworks = networks.filter(n => n.share);
const { title, description }: Props = Astro.props;

type ShareVars = {
  url?: string;
  title?: string;
  description?: string;
};

const vars: ShareVars = {
  url: Astro.request.url,
  title,
  description,
};
---

<div class="relative my-8">
  <div
    class="absolute inset-0 flex items-center"
    aria-hidden="true"
  >
    <div class="w-full border-t border-gray-300 dark:border-gray-700"></div>
  </div>
  <div class="relative flex justify-center">
    <span
      class="isolate flex flex-wrap justify-center gap-px rounded-md shadow-xs"
    >
      {
        shareNetworks.map((network, index) => {
          const isFirst = index === 0;
          const isLast = index === networks.length - 1;
          const baseClass = `
                  relative inline-flex items-center
                  focus:z-10
                  bg-gray-50 hover:bg-gray-100
                  dark:bg-gray-950 hover:dark:bg-gray-900
                  text-gray-400 dark:text-gray-600
                  ring-1 ring-gray-300 ring-inset dark:ring-gray-700
                  px-3 py-2
                  `;
          const extraClass = `${isFirst ? 'rounded-l-md' : ''} ${isLast ? 'rounded-r-md' : ''}`;
          const href = network.share
            ? network.share.replace(/\${([^}]+)}/g, (_, key) =>
                encodeURIComponent(vars[key as keyof ShareVars] ?? '').replace(/%20/g, '+')
              )
            : network.url;

          return (
            <a
              href={href}
              class={`${baseClass} ${extraClass} ${network.fill}`}
              target="_blank"
              rel="noopener noreferrer"
            >
              <span class="sr-only">{network.label}</span>
              <Icon name={network.icon} />
            </a>
          );
        })
      }
    </span>
  </div>
</div>
