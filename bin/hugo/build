#!/bin/bash

# set -euo pipefail # http://redsymbol.net/articles/unofficial-bash-strict-mode
# IFS=$'\n\t'

# SCRIPTPATH="$(
#   cd "$(dirname "$0")" >/dev/null 2>&1 || exit
#   pwd -P
# )"
CURPATH="$(pwd -P)"

# check required tools
REQUIRED_TOOLS=(
  hugo
  git
  npm
)
for TOOL in "${REQUIRED_TOOLS[@]}"; do
  if ! command -v "${TOOL}" >/dev/null; then
    echo "${TOOL} is required... "
    exit 1
  fi
done

# load .env variables
FILE=.env
if [ -f "$FILE" ]; then
  set -a
  # shellcheck source=/dev/null
  source "${FILE}"
  set +a
fi

# check if modules are up to date
# declare -a MODULES=(
#   "hugo-blockify"
#   "hugo-theme"
# )
# for i in "${MODULES[@]}"; do
#   cd "../$i" || exit
#   if [[ $(git diff --stat) != '' ]]; then
#     echo "${i} is dirty"
#     exit 128
#   fi
# done
# cd "$CURPATH" || exit

# @todo find out what we intended here ;] (@davidsneighbour)
# BASE_URL_PARAM=""
# if [ -n "${1}" ]; then
#   BASE_URL_PARAM="-b=${1}"
# fi

# recreate ssl certificates
hugo server trust

# create replacements via environment
NOT_FIRST_LINE=false
HUGO_MODULE_REPLACEMENTS=""
REPLACEMENTS="${CURPATH}"/bin/etc/hugo/replacements
if test -f "${REPLACEMENTS}"; then
  while read -ra __; do
    if $NOT_FIRST_LINE; then
      HUGO_MODULE_REPLACEMENTS="${HUGO_MODULE_REPLACEMENTS},${__[0]} -> ${__[1]}"
    else
      HUGO_MODULE_REPLACEMENTS="${__[0]} -> ${__[1]}"
      NOT_FIRST_LINE=true
    fi
  done <"${REPLACEMENTS}"
  [[ -n "${HUGO_MODULE_REPLACEMENTS}" ]] && export HUGO_MODULE_REPLACEMENTS="${HUGO_MODULE_REPLACEMENTS}" || echo "No replacements found"
fi

# cleanup hugo logging
npm run clean:hugo

# update modules
hugo mod get -u ./...

# running hugo
# @TODO remove paranoid settings and make into a cli option to debug more
# starting hugo server
# shellcheck disable=SC2086
env HUGO_MODULE_REPLACEMENTS="${HUGO_MODULE_REPLACEMENTS}" \
  hugo \
  --logLevel "${LOGLEVEL}" \
  --cleanDestinationDir \
  --enableGitInfo
