---
import { withDefaults } from '@utils/withDefaults';
import { Icon } from 'astro-icon/components';

/**
 * Props for the Pagination component.
 */
export interface Props {
  /** The base path before any pagination info. E.g. "/blog/" */
  basePath: string;

  /** Optional partial between base and page number. Must be lowercase. E.g. "page" */
  pagingPartial?: string;

  /** The currently active page */
  currentPage: number;

  /** Total number of available pages */
  totalPages: number;

  /** Spacer shown for gaps, default is "…" */
  spacer?: string;

  /** Number of pagination items to show around the current page */
  range?: number;

  /** Show the first page number if it's not in range */
  showFirst?: boolean;

  /** Show the last page number if it's not in range */
  showLast?: boolean;

  /** Behavior for edge buttons: hide or disable them */
  edgeMode?: 'hide' | 'disable';
}

const props = withDefaults(Astro.props as Props, {
  pagingPartial: '',
  spacer: '…',
  range: 2,
  showFirst: true,
  showLast: true,
  edgeMode: 'disable',
}) as Required<
  Pick<
    Props,
    | 'basePath'
    | 'currentPage'
    | 'totalPages'
    | 'pagingPartial'
    | 'spacer'
    | 'range'
    | 'showFirst'
    | 'showLast'
    | 'edgeMode'
  >
>;

if (props.pagingPartial && /[A-Z]/.test(props.pagingPartial)) {
  throw new Error(
    `[Pagination] Invalid "pagingPartial": must be lowercase only. Received "${props.pagingPartial}"`,
  );
}

function pageLink(n: number): string {
  const base = props.basePath.replace(/\/+$/, '');
  const partial = props.pagingPartial.replace(/^\/|\/$/g, '');

  if (n === 1) return `${base}/`;

  return partial ? `${base}/${partial}/${n}/` : `${base}/${n}/`;
}

function generatePagination(): (number | string)[] {
  const pages: (number | string)[] = [];
  const { currentPage, totalPages, range, spacer, showFirst, showLast } = props;

  const start = Math.max(1, currentPage - range);
  const end = Math.min(totalPages, currentPage + range);

  if (showFirst && start > 1) {
    pages.push(1);
    if (start > 2) pages.push(spacer);
  }

  for (let i = start; i <= end; i++) {
    pages.push(i);
  }

  if (showLast && end < totalPages) {
    if (end < totalPages - 1) pages.push(spacer);
    pages.push(totalPages);
  }

  return pages;
}

const paginationItems = generatePagination();
const isFirst = props.currentPage === 1;
const isLast = props.currentPage === props.totalPages;
---

{
  props.totalPages > 1 && (
    <nav class="flex items-center justify-between border-t px-4 sm:px-0">
      {props.edgeMode === 'hide' ? (
        !isFirst && <a href={pageLink(props.currentPage - 1)}>&larr; Prev</a>
      ) : (
        <div class="-mt-px flex w-0 flex-1">
          {isFirst ? (
            <span class="inline-flex items-center border-t-2 border-transparent px-4 pt-4 text-sm font-medium text-gray-500">
              <Icon name="bi:arrow-left" class="mr-2 place-self-center" />
              Prev
            </span>
          ) : (
            <a
              href={pageLink(props.currentPage - 1)}
              class="inline-flex items-center border-t-2 border-transparent pt-4 pr-1 text-sm font-medium text-gray-500 hover:border-gray-300 hover:text-gray-700"
            >
              <Icon name="bi:arrow-left" class="mr-2 place-self-center" />
              Prev
            </a>
          )}
        </div>
      )}
      <div class="hidden md:-mt-px md:flex">
        {paginationItems.map(item =>
          typeof item === 'number' ? (
            <a
              href={pageLink(item)}
              class={
                item === props.currentPage
                  ? 'inline-flex items-center border-t-2 border-indigo-500 px-4 pt-4 text-sm font-medium text-indigo-600'
                  : 'inline-flex items-center border-t-2 border-transparent px-4 pt-4 text-sm font-medium text-gray-500 hover:border-gray-300 hover:text-gray-700'
              }
            >
              {item}
            </a>
          ) : (
            <span class="inline-flex items-center border-t-2 border-transparent px-4 pt-4 text-sm font-medium text-gray-500">
              {item}
            </span>
          ),
        )}
      </div>
      {props.edgeMode === 'hide' ? (
        !isLast && <a href={pageLink(props.currentPage + 1)}>Next &rarr;</a>
      ) : (
        <div class="-mt-px flex w-0 flex-1 justify-end">
          {isLast ? (
            <span class="inline-flex items-center border-t-2 border-transparent px-4 pt-4 text-sm font-medium text-gray-500">
              Next
              <Icon name="bi:arrow-right" class="ml-2 place-self-center" />
            </span>
          ) : (
            <a
              href={pageLink(props.currentPage + 1)}
              class="inline-flex items-center border-t-2 border-transparent pt-4 pl-1 text-sm font-medium text-gray-500 hover:border-gray-300 hover:text-gray-700"
            >
              Next
              <Icon name="bi:arrow-right" class="ml-2 place-self-center" />
            </a>
          )}
        </div>
      )}
    </nav>
  )
}
