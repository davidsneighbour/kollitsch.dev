---

import { withDefaults } from '@utils/withDefaults';

/**
 * Props for the Pagination component.
 */
export interface Props {
  /** The base path before any pagination info. E.g. "/blog/" */
  basePath: string;

  /** Optional partial between base and page number. Must be lowercase. E.g. "page" */
  pagingPartial?: string;

  /** The currently active page */
  currentPage: number;

  /** Total number of available pages */
  totalPages: number;

  /** Spacer shown for gaps, default is "…" */
  spacer?: string;

  /** Number of pagination items to show around the current page */
  range?: number;

  /** Show the first page number if it's not in range */
  showFirst?: boolean;

  /** Show the last page number if it's not in range */
  showLast?: boolean;

  /** Behavior for edge buttons: hide or disable them */
  edgeMode?: 'hide' | 'disable';
}

const props = withDefaults(Astro.props as Props, {
  pagingPartial: '',
  spacer: '…',
  range: 3,
  showFirst: true,
  showLast: true,
  edgeMode: 'hide',
}) as Required<Pick<Props,
  'basePath' | 'currentPage' | 'totalPages' | 'pagingPartial' |
  'spacer' | 'range' | 'showFirst' | 'showLast' | 'edgeMode'
>>;

if (props.pagingPartial && /[A-Z]/.test(props.pagingPartial)) {
  throw new Error(
    `[Pagination] Invalid "pagingPartial": must be lowercase only. Received "${props.pagingPartial}"`
  );
}

function pageLink(n: number): string {
  const base = props.basePath.replace(/\/+$/, '');
  const partial = props.pagingPartial.replace(/^\/|\/$/g, '');

  if (n === 1) return `${base}/`;

  return partial ? `${base}/${partial}/${n}/` : `${base}/${n}/`;
}

function generatePagination(): (number | string)[] {
  const pages: (number | string)[] = [];
  const { currentPage, totalPages, range, spacer, showFirst, showLast } = props;

  const start = Math.max(1, currentPage - range);
  const end = Math.min(totalPages, currentPage + range);

  if (showFirst && start > 1) {
    pages.push(1);
    if (start > 2) pages.push(spacer);
  }

  for (let i = start; i <= end; i++) {
    pages.push(i);
  }

  if (showLast && end < totalPages) {
    if (end < totalPages - 1) pages.push(spacer);
    pages.push(totalPages);
  }

  return pages;
}

const paginationItems = generatePagination();
const isFirst = props.currentPage === 1;
const isLast = props.currentPage === props.totalPages;

---

{props.totalPages > 1 && (
  <nav class="mt-8 flex flex-wrap justify-center gap-2">
    {props.edgeMode === 'hide' ? (
      !isFirst && <a href={pageLink(props.currentPage - 1)}>&larr; Prev</a>
    ) : (
      <a
        class={isFirst ? 'pointer-events-none ' : ''}
        href={isFirst ? '#' : pageLink(props.currentPage - 1)}
      >
        &larr; Prev
      </a>
    )}

    {paginationItems.map((item) =>
      typeof item === 'number' ? (
        <a
          href={pageLink(item)}
          class={item === props.currentPage ? 'font-bold underline' : ''}
        >
          {item}
        </a>
      ) : (
        <span class="px-2">{item}</span>
      )
    )}

    {props.edgeMode === 'hide' ? (
      !isLast && <a href={pageLink(props.currentPage + 1)}>Next &rarr;</a>
    ) : (
      <a
        class={isLast ? 'pointer-events-none' : ''}
        href={isLast ? '#' : pageLink(props.currentPage + 1)}
      >
        Next &rarr;
      </a>
    )}
  </nav>
)}
