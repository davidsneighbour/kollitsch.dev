/*******************************************************************************
 * full bleed grid layout
 * @see https://ryanmulligan.dev/blog/layout-breakouts/
 * @see https://css-tricks.com/full-bleed/
 * @see https://css-tricks.com/almanac/properties/g/grid-template-columns/
 * @todo properly implement inside of a bootstrap container (fluid)
 ******************************************************************************/
$layout-character-width: 70ch;

/*******************************************************************************
 * content area
 ******************************************************************************/
main {
	padding-top: $heading-height + 30px;

	padding-bottom: 0;
	margin-bottom: 0;

	background-color: var(--bs-body-bg);

	&::before {
		// .embellishment-one setup
		opacity: .4;
		background-position: 0 100px;
	}

	z-index: 1001;

	@extend .min-vh-100;
	@extend .position-relative;

	display: grid;

	--gap: clamp(1rem, 6vw, 3rem);
	--full: minmax(var(--gap), 1fr);
	--content: min(#{$layout-character-width}, 100%);
	--popout: minmax(0, 2rem);
	--feature: minmax(0, 5rem);

	/* stylelint-disable plugin/no-unsupported-browser-features
				-- we can live with that. */
	grid-template-columns: [full-start] var(--full) [feature-start] var(--feature) [popout-start] var(--popout) [content-start] var(--content) [content-end] var(--popout) [popout-end] var(--feature) [feature-end] var(--full) [full-end];

	>* {
		grid-column: content;
	}

	.popout {
		grid-column: popout;
	}

	.feature {
		grid-column: feature;
	}

	.full {
		grid-column: full;
	}

	#bi {
		grid-column: full;
		z-index: -1;

		img {
			@extend .w-100;
			@extend .opacity-25;
			margin-top: -59%;
		}
	}
}

/*******************************************************************************
 * --gap represents a gutter size for the left and right sides of the page.
 * This value leans into the clamp() function for more fluid,
 * flexible sizing.
 * --full stretches an element so that it spans the entire horizontal space.
 * By setting --gap as the min value, it also takes on the role of visible page
 * gutters for smaller screens.
 * --content acts as the main content area. The min() function sets the
 * max-width of this column. Once the available space falls below this value,
 * it then switches to 100% while also subtracting the left and right gutter
 * sizes.
 * --popout and --feature extend elements beyond the content area by 2rem and
 * 5rem respectively. As the available horizontal area tightens, these values
 * collapse down to nothing, aligning elements with the main content space on
 * smaller screens.
 ******************************************************************************/
