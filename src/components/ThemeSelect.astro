<theme-selector hide-auto></theme-selector>
<script is:inline>
  if (!customElements.get("theme-selector")) {
    customElements.define(
      "theme-selector",
      class extends HTMLElement {
        connectedCallback() {
          const hideAuto = this.hasAttribute("hide-auto");

          // keep auto support but only show light/dark if hideAuto
          this.themes = hideAuto
            ? ["light", "dark"]
            : ["auto", "light", "dark"];

          // build button
          this.btn = document.createElement("button");
          this.btn.setAttribute("aria-label", "Toggle theme");
          this.btn.addEventListener("click", () => this.nextTheme());
          this.appendChild(this.btn);

          this.updateIcon();
          document.addEventListener("theme-changed", () =>
            this.updateIcon()
          );
        }

        nextTheme() {
          try {
            const current = theme.getTheme();
            const idx = this.themes.indexOf(current);

            // if current is auto but hidden, map to system index
            const realIdx =
              idx >= 0
                ? idx
                : this.themes.indexOf(
                    theme.getSystemTheme()
                  );

            const next =
              this.themes[(realIdx + 1) % this.themes.length];
            theme.setTheme(next);
          } catch (err) {
            console.error("theme-selector ‚Ä∫ cycle error:", err);
          }
        }

        updateIcon(t = theme.getTheme()) {
          // if auto is hidden, show based on systemTheme
          const hideAuto = this.hasAttribute("hide-auto");
          const effective =
            t === "auto" && hideAuto
              ? theme.getSystemTheme()
              : t;

          const icons = {
            light: "‚òÄÔ∏è",
            dark: "üåô",
            auto: "üåì",
          };
          this.btn.textContent =
            icons[effective] ?? icons.auto;
        }
      }
    );
  }
</script>
