---
import { Icon } from 'astro-icon/components';
import networks from '@content/social.json';

interface Props {
  title: string;
  description: string;
  via?: string;
}

const shareNetworks = networks.filter((n) => n.share);
const { title, description }: Props = Astro.props;

type ShareVars = {
  url?: string;
  title?: string;
  description?: string;
};

const vars: ShareVars = {
  url: Astro.request.url,
  title,
  description,
};
---

<div class="relative isolate">
  <div class="group relative w-full max-w-5xl mx-auto">
    <div
      class="absolute inset-x-0 top-0 h-[4rem] z-20 pointer-events-none md:pointer-events-auto"
      aria-hidden="true"
    />
    <div
      class="absolute inset-x-0 bottom-0 h-[4rem] z-20 pointer-events-none md:pointer-events-auto"
      aria-hidden="true"
    />
    <div class="relative z-10 grid grid-cols-4 sm:grid-cols-6 md:flex md:flex-wrap md:justify-center py-16">
      <span class="hidden md:inline-block md:flex-1" />
      {
        shareNetworks.map((network, index) => {
          const isFirst = index === 0;
          const isLast = index === shareNetworks.length - 1;

          // Base style + interactive feedback
          const baseClass = `
            relative inline-flex items-center justify-center
            focus:z-10
            bg-gray-50 dark:bg-gray-950
            text-gray-400 dark:text-gray-600
            ring-1 ring-inset ring-gray-300 dark:ring-gray-700
            px-4 py-3 sm:px-3 sm:py-2
            transition-[filter,opacity,box-shadow,ring-color,background-color,color] duration-200
            grayscale opacity-60
            hover:shadow-md
            group-hover:grayscale-0 group-hover:opacity-100
            group-hover:ring-current/40
            focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-current
          `;

          // Keep your brand classes; they "light up" once grayscale is removed
          const extraClass = `
            ${isFirst ? 'md:rounded-l-md' : ''}
            ${isLast ? 'md:rounded-r-md' : ''}
            ${network.fill} ${network.background}
          `;

          const href = network.share
            ? network.share.replace(/\${([^}]+)}/g, (_, key) =>
                encodeURIComponent(vars[key as keyof ShareVars] ?? '').replace(/%20/g, '+'),
              )
            : network.url;

          return (
            <a
              href={href}
              class={`${baseClass} ${extraClass}`}
              target="_blank"
              rel="noopener noreferrer"
            >
              <span class="sr-only">{network.label}</span>
              <Icon name={network.icon} />
            </a>
          );
        })
      }
      <span class="hidden md:inline-block md:flex-1" />
    </div>
  </div>
</div>
