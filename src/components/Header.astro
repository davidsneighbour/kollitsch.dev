---
// @todo refactor

import navData from '@data/navigation.json';
import ThemeSelect from '@components/ThemeSelect.astro';
import { getHomepageUrl } from '@utils/getHomepageUrl';
import siteinfo from '@data/site.json';
import { Icon } from 'astro-icon/components';
import Breakpoints from '@components/development/Breakpoints.astro';
---

<h1
  id="sitetitle"
  class="font-changa mx-auto text-5xl sm:text-6xl md:text-7xl xl:text-8xl 2xl:text-9xl"
>
  <a href={getHomepageUrl()}>
    {siteinfo.title}
  </a>
</h1>

<header
  class="sticky top-0 z-50 border-b border-gray-200 bg-white/95 backdrop-blur-lg dark:border-gray-800 dark:bg-gray-900/95"
>
  <nav
    class="container mx-auto flex flex-col items-center justify-between py-2 md:max-w-3xl md:flex-row lg:max-w-5xl xl:max-w-7xl"
  >
    <div class="flex flex-row items-center" id="sitetitle-and-hamburger">
      <div class="" id="sitetitle">
        {/* visible when sticky only */}
        <a
          id="navbar-brand"
          href={getHomepageUrl()}
          class="font-changa flex-rows flex items-center gap-2 p-1.5 text-2xl opacity-0 transition-opacity duration-600 ease-in-out"
        >
          <Icon name="bi:house-fill" class="place-self-center" />
          {siteinfo.title}
        </a>
      </div>
      <div class="flex:block items-center md:hidden" id="hamburger-and-close">
        {/* visible on mobile view only */}
        <Icon
          name="bi:list"
          class="is--mobile-menu-hamburger open-icon place-self-center"
        />
        <Icon
          name="bi:x-lg"
          class="is--mobile-menu-hamburger close-icon hidden place-self-center"
        />
      </div>
    </div>
    <div
      id="navigation-and-theme-select"
      class="md:flex flex-col md:flex-row items-center gap-4"
    >
      {
        navData.map(value => (
          <a href={value.link} class="rounded-md px-3 py-2">
            {value.label}
          </a>
        ))
      }
      <div id="theme-select">
        <ThemeSelect hideAuto />
      </div>
    </div>
  </nav>
</header>

<script is:inline>
  // toggle mobile menu open/close state and icons
  window.kdev = window.kdev || {};
  window.kdev.mobileOpen = false;
  const closeIcon = document.querySelector('.close-icon');
  const openIcon = document.querySelector('.open-icon');
  const navSection = document.querySelector('#navigation-and-theme-select');

  const toggleIcons = () => {
    if (window.kdev.mobileOpen) {
      closeIcon?.classList.remove('hidden');
      openIcon?.classList.add('hidden');
    } else {
      closeIcon?.classList.add('hidden');
      openIcon?.classList.remove('hidden');
    }
  };
  const toggleNavVisibility = () => {
    if (!navSection) return;
    const isMdUp = window.matchMedia('(min-width: 768px)').matches;
    if (isMdUp) {
      navSection.classList.remove('hidden');
    } else {
      if (window.kdev.mobileOpen) {
        navSection.classList.remove('hidden');
      } else {
        navSection.classList.add('hidden');
      }
    }
  };

  window.addEventListener('resize', toggleNavVisibility);

  document.querySelectorAll('.is--mobile-menu-hamburger').forEach(button => {
    button.addEventListener('click', () => {
      window.kdev.mobileOpen = !window.kdev.mobileOpen;
      toggleIcons();
    });
  });
  toggleIcons();
  toggleNavVisibility();

  // hide/show sticky brand based on scroll position
  const placeholder = document.querySelector('#sitetitle');
  const stickyBrand = document.querySelector('#navbar-brand');

  if (!placeholder || !stickyBrand) {
    console.warn('Placeholder or sticky brand element not found.');
  } else {
    const observer = new IntersectionObserver(
      ([entry]) => {
        if (!entry) return;
        if (!entry.isIntersecting) {
          stickyBrand.classList.add('opacity-100');
          stickyBrand.classList.remove('opacity-0');
        } else {
          stickyBrand.classList.remove('opacity-100');
          stickyBrand.classList.add('opacity-0');
        }
      },
      { threshold: 0 },
    );

    observer.observe(placeholder);

    const isIntersecting =
      placeholder.getBoundingClientRect().top >= 0 &&
      placeholder.getBoundingClientRect().bottom > 0;

    if (!isIntersecting) {
      stickyBrand.classList.add('sticky-visible');
    } else {
      stickyBrand.classList.remove('sticky-visible');
    }
  }
</script>

<Breakpoints />
