---
import type { CollectionEntry } from 'astro:content';
import type { ImageMetadata } from 'astro';

import {
  resolveCover,
  resolveImagePath,
  resolveAstroImage,
} from '@utils/images';
import { getTailwindSizes } from '@utils/tailwind';
import { Picture } from 'astro:assets';
import { log } from '@utils/debug';
import defaultCoverImage from '@assets/images/polina-kuzovkova-zKQ6Zyxp9Jo-unsplash.jpg';

interface Props {
  post: CollectionEntry<'blog'>;
  classes?: string;
  quality?: 'low' | 'medium' | 'high' | 'max';
  widths?: number[];
  formats?: string[];
  sizes?: string;
  layout?: 'fixed' | 'constrained' | 'full-width';
}
const {
  post,
  classes = 'w-full max-w-full h-auto mb-4 z-20',
  quality = 'high',
  widths = [640, 768, 1024, 1280, 1536],
  formats = ['avif', 'webp', 'jpeg'],
  sizes = getTailwindSizes({
    base: 3,
    sm: 1,
    md: 2,
    maxContentWidth: 1280,
  }),
  layout = 'constrained',
}: Props = Astro.props;

log.start();
log.stop();
log.debug('POSTIMAGE GENERATION ###########################################');
log.debug('COVER CONFIG', post.data.cover);
const cover = resolveCover(post);
log.debug('COVER RESOLVED', cover);
let imageMeta: ImageMetadata | null = null;
if (cover.src) {
  log.debug('COVER IMAGE SRC', cover.src);
  const imagePath = resolveImagePath(cover.src, post.id);
  log.debug('IMAGE PATH RESOLVED', imagePath);
  imageMeta = imagePath ? resolveAstroImage(imagePath) : defaultCoverImage;
  log.debug('IMAGE META RESOLVED', imageMeta);
}
log.debug('POSTIMAGE GENERATION ENDED######################################');
log.stop();
---

{
  cover.type === 'video' && cover.video ? (
    <figure class="group relative isolate z-10">
      <div class={`aspect-2/1 overflow-hidden ${classes}`}>
        <lite-youtube
          videoid={cover.video.youtube}
          class="z-20 mb-4 h-auto w-full max-w-full"
        />
      </div>
      <script
        src="/vendor/lite-youtube-embed/lite-yt-embed.js"
        type="module"
        is:inline
      />

      <figcaption class="absolute right-0 bottom-0 left-0 z-30 bg-gray-950/80 text-center text-orange-50/90 opacity-0 transition-all delay-100 duration-600 ease-in-out group-hover:opacity-100">
        {/* {(() => {
          const artist = musicData.data.find(
            a => a.slug === cover.video!.artist,
          );
          const name = artist ? artist.name : cover.video!.artist;
          return `${name} â€” ${cover.video!.title}`;
        })()} */}
        {cover.video.title}
      </figcaption>
    </figure>
  ) : (
    imageMeta && (
      <figure class="group relative isolate z-10">
        <Picture
          src={imageMeta}
          alt={cover.alt}
          formats={formats}
          widths={widths}
          sizes={sizes}
          layout={layout}
          class={classes}
          quality={quality}
          priority
        />
        {cover.title && (
          <figcaption
            transition:animate="slide"
            set:html={cover.title}
            class="absolute right-0 bottom-0 left-0 z-30 bg-gray-950/80 text-center text-orange-50/90 opacity-0 transition-all delay-100 duration-600 ease-in-out group-hover:opacity-100"
          />
        )}
      </figure>
    )
  )
}
