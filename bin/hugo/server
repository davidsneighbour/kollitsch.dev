#!/bin/bash

set -euo pipefail # http://redsymbol.net/articles/unofficial-bash-strict-mode

# Reset BASH time counter
SECONDS=0

################################################################################
# Help                                                                         #
################################################################################
Help() {
  # Display Help
  echo "A quick setup script for local GoHugo dev servers."
  echo
  echo "Syntax: server [-v|h]"
  echo "options:"
  echo "h     Print this Help."
  echo "v     Verbose mode."
  echo
}

REQUIRED_TOOLS=(
  hugo
  npm
  export
  trap
)

for TOOL in "${REQUIRED_TOOLS[@]}"; do
  if ! command -v "${TOOL}" >/dev/null; then
    echo "${TOOL} is required... "
    exit 1
  fi
done

while getopts ":hn:" option; do
  case $option in
  h) # display Help
    Help
    exit
    ;;
  n) # Enter a name
    Name=$OPTARG ;;
  \?) # Invalid option
    echo "Error: Invalid option"
    exit
    ;;
  esac
done

while getopts u:a:f: flag; do
  case "${flag}" in
  u) username=${OPTARG} ;;
  a) age=${OPTARG} ;;
  f) fullname=${OPTARG} ;;
  esac
done

for FILE in bin/lib/*; do
  set -a
  # this routine ranges through a folder of files that we don't explicitly know (@davidsneighbour)
  # see https://github.com/koalaman/shellcheck/wiki/SC1090
  # shellcheck source=/dev/null
  source "${FILE}"
  set +a
done

# SCRIPTPATH="$(
#   cd "$(dirname "$0")" >/dev/null 2>&1 || exit
#   pwd -P
# )"
CURPATH="$(pwd -P)"

trap "{
	echo 'Terminated with Ctrl+C\n';
	echo
}" SIGINT

FILE=${CURPATH}/.env
if [ -f "$FILE" ]; then
  echo "exporting .env"
  set -a
  # this routine calls a file that we don't explicitly know (@davidsneighbour)
  # see https://github.com/koalaman/shellcheck/wiki/SC1090
  # shellcheck source=/dev/null
  source "${FILE}"
  set +a
fi

rm -rf public

# cleanup hugo logging
# npm run clean:hugo

# update modules
#hugo mod get -u ./...

# recreate ssl certificates
hugo server trust

# create replacements via environment
NOT_FIRST_LINE=false
HUGO_MODULE_REPLACEMENTS=""
REPLACEMENTS="${CURPATH}"/bin/etc/hugo/replacements
if test -f "${REPLACEMENTS}"; then
  while read -ra __; do
    if $NOT_FIRST_LINE; then
      HUGO_MODULE_REPLACEMENTS="${HUGO_MODULE_REPLACEMENTS},${__[0]} -> ${__[1]}"
    else
      HUGO_MODULE_REPLACEMENTS="${__[0]} -> ${__[1]}"
      NOT_FIRST_LINE=true
    fi
  done <"${REPLACEMENTS}"
  [[ -n "${HUGO_MODULE_REPLACEMENTS}" ]] && export HUGO_MODULE_REPLACEMENTS="${HUGO_MODULE_REPLACEMENTS}" || echo "No replacements found"
fi

# echo "REPLACEMENTS:"
# echo ${HUGO_MODULE_REPLACEMENTS}

# DNB bin config
dnb_server_debug=""
# shellcheck disable=SC2153
if [ "$DNB_SERVER_DEBUG" = true ]; then
  echo "Debugging ON"
  dnb_server_debug=""
  # dnb_server_debug="${dnb_server_debug} --templateMetrics --templateMetricsHints"
  dnb_server_debug="${dnb_server_debug} --printI18nWarnings --printPathWarnings "
  dnb_server_debug="${dnb_server_debug} --printUnusedTemplates --debug --verbose --logLevel debug "
else
  echo "Debugging OFF"
fi

dnb_server_future=""
# shellcheck disable=SC2153
if [ "$DNB_SERVER_FUTURE" = true ]; then
  echo "Future Posts ON"
  dnb_server_future="--buildFuture "
else
  echo "Future Posts OFF"
fi

dnb_server_expired=""
# shellcheck disable=SC2153
if [ "$DNB_SERVER_EXPIRED" = true ]; then
  echo "Expired Posts ON"
  dnb_server_expired="--buildExpired "
else
  echo "Expired Posts OFF"
fi

dnb_server_drafts=""
# shellcheck disable=SC2153
if [ "$DNB_SERVER_DRAFTS" = true ]; then
  echo "Draft Posts ON"
  dnb_server_drafts="--buildDrafts "
else
  echo "Draft Posts OFF"
fi

echo "Elapsed: $((SECONDS / 3600))hrs $(((SECONDS / 60) % 60))min $((SECONDS % 60))sec"

# starting hugo server
# shellcheck disable=SC2086
env HUGO_MODULE_REPLACEMENTS="${HUGO_MODULE_REPLACEMENTS}" \
  hugo server \
  --environment development \
  --disableFastRender \
  --navigateToChanged \
  ${dnb_server_drafts} \
  ${dnb_server_future} \
  ${dnb_server_expired} \
  ${dnb_server_debug} \
  --renderToDisk \
  --watch \
  --enableGitInfo \
  --forceSyncStatic \
  --tlsAuto \
  --baseURL https://${HOSTNAME}/ \
  --port "${PORT}" \
  --bind "${IP}" 2>&1 | tee -a hugo.log

echo "Elapsed: $((SECONDS / 3600))hrs $(((SECONDS / 60) % 60))min $((SECONDS % 60))sec"
