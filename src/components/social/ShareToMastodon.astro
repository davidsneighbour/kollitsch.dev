---
// @todo refactor and comment
export interface Props extends PostProp<'blog'> {}
const { post }: Props = Astro.props;
---

<mastodon-share
  data-title={post.data.title}
  data-description={post.data.description}
  data-url={post.permalink}
  data-url-template="https://{instance}/share?text={text}&url={url}"
></mastodon-share>

<script>
  type MastodonShareI18n = {
    buttonLabel: string;
    modalTitle: string;
    instanceLabel: string;
    instancePlaceholder: string;
    post: string;
    cancel: string;
    clearSaved: string;
    errorInvalidInstance: string;
    errorMissingConfig: string;
    errorOpenWindow: string;
  };

  // type MastodonShareConfig = {
  //   title?: string | null;
  //   description?: string | null;
  //   permalink?: string | null;
  //   urlTemplate?: string | null;
  //   i18n?: Partial<MastodonShareI18n> | null;
  // };

  const LS_KEY = 'mastodon_instance_url';

  const DEFAULT_I18N: MastodonShareI18n = {
    buttonLabel: 'Share to Mastodon',
    cancel: 'Cancel',
    clearSaved: 'Clear saved instance',
    errorInvalidInstance: 'Please enter a valid instance URL (https://mas.to).',
    errorMissingConfig:
      'Missing title, description or URL. Please fix your page setup.',
    errorOpenWindow:
      'Could not open the share window. Please allow popups for this site.',
    instanceLabel: 'Your instance URL',
    instancePlaceholder: 'e.g. https://mas.to',
    modalTitle: 'Share to Mastodon',
    post: 'Post',
  };

  // data-i18n-modalTitle="Share to Mastodon"
  // data-i18n-saveAndShare="Save & Share"
  // data-i18n-errorInvalidInstance="Please enter a valid instance URL (https://example.tld)."

  const DEFAULT_URL_TEMPLATE = 'https://{instance}/share?text={text}&url={url}';

  // Helpers

  function sanitizeInstance(raw: string): string {
    const trimmed = String(raw).trim();
    if (!trimmed) throw new Error('empty');
    const prefixed = /^https?:\/\//i.test(trimmed)
      ? trimmed
      : `https://${trimmed}`;
    let u: URL;
    try {
      u = new URL(prefixed);
    } catch {
      throw new Error('invalid');
    }
    u.protocol = 'https:';
    u.username = '';
    u.password = '';
    u.pathname = '';
    u.search = '';
    u.hash = '';
    const host = u.host.replace(/\/+$/, '');
    if (!host) throw new Error('invalid');
    return host;
  }

  function buildShareUrl(
    template: string,
    instanceHost: string,
    title: string,
    description: string,
    permalink: string,
  ): string {
    const text = `${title}${description ? ' - ' + description : ''}`;
    const encodedText = encodeURIComponent(text);
    const encodedUrl = encodeURIComponent(permalink);
    return template
      .replace('{instance}', instanceHost)
      .replace('{text}', encodedText)
      .replace('{url}', encodedUrl);
  }

  function safeOpen(href: string): boolean {
    const win = window.open(href, '_blank', 'noopener,noreferrer');
    return !!win;
  }

  // Read attributes and normalize to null where absent
  function getAttr(el: Element, name: string): string | null {
    const v = el.getAttribute(name);
    return v !== null && v.trim() !== '' ? v : null;
  }

  function parseI18n(el: HTMLElement): MastodonShareI18n {
    let i18n: MastodonShareI18n = { ...DEFAULT_I18N };

    const raw = getAttr(el, 'data-i18n');
    if (raw) {
      try {
        const parsed = JSON.parse(raw) as Partial<MastodonShareI18n>;
        i18n = { ...i18n, ...parsed };
      } catch {
        // ignore bad JSON
      }
    }
    for (const key of Object.keys(
      DEFAULT_I18N,
    ) as (keyof MastodonShareI18n)[]) {
      const attr = getAttr(el, `data-i18n-${key}`);
      if (attr !== null) i18n[key] = attr;
    }
    return i18n;
  }

  function readConfig(el: HTMLElement): {
    title: string | null;
    description: string | null;
    permalink: string | null;
    urlTemplate: string;
    i18n: MastodonShareI18n;
  } {
    const title = getAttr(el, 'data-title');
    const description = getAttr(el, 'data-description');
    const permalink = getAttr(el, 'data-url');
    const urlTemplate =
      getAttr(el, 'data-url-template') ?? DEFAULT_URL_TEMPLATE;
    const i18n = parseI18n(el);

    return { description, i18n, permalink, title, urlTemplate };
  }

  // Default styles with CSS variables and parts
  const styles = String.raw`
:host {
  --mstdn-fg: currentColor;
  --mstdn-bg: transparent;
  --mstdn-surface: Canvas;
  --mstdn-border: currentColor;
  --mstdn-backdrop: rgba(0,0,0,.5);
  --mstdn-radius: .75rem;
  --mstdn-pad: 1rem;
  --mstdn-btn-pad: .5rem .75rem;
  --mstdn-input-pad: .5rem .625rem;
  --mstdn-error: #b00020;
  display: inline-block;
}

button.mstdn-share {
  color: var(--mstdn-fg);
  background: var(--mstdn-bg);
  border: 1px solid var(--mstdn-border);
  border-radius: var(--mstdn-radius);
  padding: var(--mstdn-btn-pad);
  font: inherit;
  cursor: pointer;
}

dialog.mstdn-modal::backdrop { background: var(--mstdn-backdrop); }
dialog.mstdn-modal {
  border: none;
  border-radius: var(--mstdn-radius);
  padding: 0;
  max-width: 36rem;
  width: 92vw;
  background: var(--mstdn-surface);
  color: var(--mstdn-fg);
}

.mstdn-card { padding: var(--mstdn-pad); }
.mstdn-header { font-weight: 700; margin: 0 0 .75rem; }
.mstdn-preview { margin: .5rem 0; font-size: .9rem; }
.mstdn-preview li { margin: .25rem 0; }
.mstdn-row { display: flex; flex-direction: column; gap: .5rem; margin: .75rem 0; }

.mstdn-input {
  width: 100%;
  padding: var(--mstdn-input-pad);
  border-radius: var(--mstdn-radius);
  border: 1px solid var(--mstdn-border);
  background: var(--mstdn-bg);
  color: var(--mstdn-fg);
}

.mstdn-actions { display: flex; gap: .5rem; margin-top: 1rem; align-items: center; flex-wrap: wrap; }

.mstdn-primary,
.mstdn-secondary {
  padding: var(--mstdn-btn-pad);
  border-radius: var(--mstdn-radius);
  border: 1px solid var(--mstdn-border);
  font: inherit;
  cursor: pointer;
}

.mstdn-primary { background: var(--mstdn-fg); color: var(--mstdn-surface); }
.mstdn-secondary { background: var(--mstdn-bg); color: var(--mstdn-fg); }

.mstdn-clear { font-size: .875rem; text-decoration: underline; cursor: pointer; }

.mstdn-error { color: var(--mstdn-error); font-size: .9rem; min-height: 1.2em; }
`;

  class MastodonShare extends HTMLElement {
    #root: ShadowRoot;
    #dialog: HTMLDialogElement | null = null;
    #input: HTMLInputElement | null = null;
    #error: HTMLParagraphElement | null = null;
    #cfg: ReturnType<typeof readConfig>;

    static get observedAttributes(): string[] {
      return [
        'data-title',
        'data-description',
        'data-url',
        'data-url-template',
        'data-i18n',
      ];
    }

    constructor() {
      super();
      this.#root = this.attachShadow({ mode: 'open' });
      this.#cfg = readConfig(this);
      this.#render();
    }

    connectedCallback(): void {
      const stored = this.#getStoredInstance();
      if (stored !== null && this.#input)
        this.#input.value = `https://${stored}`;
    }

    attributeChangedCallback(): void {
      this.#cfg = readConfig(this);
      this.#render();
    }

    // Always return string|null
    #getStoredInstance(): string | null {
      try {
        const v = localStorage.getItem(LS_KEY);
        return v !== null && v.trim() !== '' ? v.trim() : null;
      } catch {
        return null;
      }
    }
    #setStoredInstance(host: string): void {
      try {
        localStorage.setItem(LS_KEY, host);
      } catch (e) {
        console.log(e);
      }
    }
    #clearStoredInstance(): void {
      try {
        localStorage.removeItem(LS_KEY);
      } catch (e) {
        console.log(e);
      }
    }

    #openModal = (): void => {
      if (!this.#dialog) return;
      if (this.#error) this.#error.textContent = '';
      this.#dialog.showModal();
      this.#input?.focus();
    };

    #closeModal = (): void => {
      this.#dialog?.close();
    };

    #onClear = (ev: Event): void => {
      ev.preventDefault();
      this.#clearStoredInstance();
      if (this.#input) this.#input.value = '';
      if (this.#error) this.#error.textContent = '';
    };

    #onSubmit = (ev: Event): void => {
      ev.preventDefault();

      // Normalize input value to string|null
      const raw: string | null = this.#input ? this.#input.value : null;

      const { title, description, permalink, urlTemplate, i18n } = this.#cfg;

      // Required fields must be present
      if (title === null || description === null || permalink === null) {
        if (this.#error) this.#error.textContent = i18n.errorMissingConfig;
        return;
      }

      // Validate instance
      let instanceHost: string;
      try {
        if (raw === null) throw new Error('empty');
        instanceHost = sanitizeInstance(raw);
      } catch {
        if (this.#error) this.#error.textContent = i18n.errorInvalidInstance;
        return;
      }

      this.#setStoredInstance(instanceHost);

      const href = buildShareUrl(
        urlTemplate,
        instanceHost,
        title,
        description,
        permalink,
      );

      if (safeOpen(href)) {
        this.#closeModal();
      } else {
        if (this.#error) this.#error.textContent = i18n.errorOpenWindow;
      }
    };

    #render(): void {
      const { i18n, title, description, permalink } = this.#cfg;

      this.#root.innerHTML = '';
      const style = document.createElement('style');
      style.textContent = styles;

      const btn = document.createElement('button');
      btn.className = 'mstdn-share';
      btn.type = 'button';
      btn.textContent = i18n.buttonLabel;
      btn.addEventListener('click', this.#openModal);
      btn.setAttribute('part', 'button');

      const dialog = document.createElement('dialog');
      dialog.className = 'mstdn-modal';
      dialog.setAttribute('part', 'dialog');
      // Close on backdrop click
      dialog.addEventListener('click', (e: MouseEvent) => {
        if (e.target === dialog) dialog.close();
      });

      const card = document.createElement('div');
      card.className = 'mstdn-card';
      card.setAttribute('part', 'card');

      const h = document.createElement('h2');
      h.className = 'mstdn-header';
      h.textContent = i18n.modalTitle;
      h.setAttribute('part', 'header');

      // Preview
      const preview = document.createElement('ul');
      preview.className = 'mstdn-preview';
      preview.setAttribute('part', 'preview');
      preview.innerHTML = `
      <li part="preview-item"><strong part="preview-label">Title:</strong> <span part="preview-value">${title ?? "<span style='color:#b00020'>[missing]</span>"}</span></li>
      <li part="preview-item"><strong part="preview-label">Description:</strong> <span part="preview-value">${description ?? "<span style='color:#b00020'>[missing]</span>"}</span></li>
      <li part="preview-item"><strong part="preview-label">Link:</strong> <span part="preview-value">${permalink ?? "<span style='color:#b00020'>[missing]</span>"}</span></li>
    `;

      const row = document.createElement('div');
      row.className = 'mstdn-row';
      row.setAttribute('part', 'row');

      const label = document.createElement('label');
      label.textContent = i18n.instanceLabel;
      label.setAttribute('part', 'label');

      const input = document.createElement('input');
      input.className = 'mstdn-input';
      input.type = 'url';
      input.placeholder = i18n.instancePlaceholder;
      input.setAttribute('part', 'input');
      input.addEventListener('keydown', (e: KeyboardEvent) => {
        if (e.key === 'Enter') this.#onSubmit(e);
      });

      const error = document.createElement('p');
      error.className = 'mstdn-error';
      error.setAttribute('aria-live', 'polite');
      error.setAttribute('part', 'error');

      const actions = document.createElement('div');
      actions.className = 'mstdn-actions';
      actions.setAttribute('part', 'actions');

      const postBtn = document.createElement('button');
      postBtn.className = 'mstdn-primary';
      postBtn.type = 'button';
      postBtn.textContent = i18n.post;
      postBtn.addEventListener('click', this.#onSubmit);
      postBtn.setAttribute('part', 'button button-primary');

      const cancel = document.createElement('button');
      cancel.className = 'mstdn-secondary';
      cancel.type = 'button';
      cancel.textContent = i18n.cancel;
      cancel.addEventListener('click', this.#closeModal);
      cancel.setAttribute('part', 'button button-secondary');

      const clear = document.createElement('a');
      clear.href = '#';
      clear.className = 'mstdn-clear';
      clear.textContent = i18n.clearSaved;
      clear.addEventListener('click', this.#onClear);
      clear.setAttribute('part', 'link link-clear');

      const actionsFrag = document.createDocumentFragment();
      actionsFrag.append(postBtn, cancel, clear);

      actions.append(actionsFrag);
      row.append(label, input);
      card.append(h, preview, row, error, actions);
      dialog.append(card);

      this.#root.append(style, btn, dialog);

      this.#dialog = dialog;
      this.#input = input;
      this.#error = error;
    }
  }

  if (!customElements.get('mastodon-share')) {
    customElements.define('mastodon-share', MastodonShare);
  }
</script>
