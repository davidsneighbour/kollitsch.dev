---
import type { CollectionEntry } from "astro:content";
// https://docs.astro.build/en/guides/view-transitions/
import { ClientRouter } from "astro:transitions";
// individual head components
import Favicon from "@components/head/Favicon.astro";
import FontsPreload from "@components/head/FontsPreload.astro";
import Meta from "@components/head/Meta.astro";
import OpenGraph from "@components/head/OpenGraph.astro";
import WebComponents from "@components/head/WebComponents.astro";
import setup from "@data/setup.json" with { type: "json" };
import { createDefaultPost, resolvePostTitle } from "@utils/content.ts";
// @todo refactor and comment
import type { MarkdownInstance } from "astro";

type PostLike = MarkdownInstance<Record<string, unknown>> & {
  readonly data?: {
    readonly title?: string;
    readonly linktitle?: string;
    readonly description?: string;
    readonly draft?: boolean;
  };
};

export interface Props {
  readonly post?: PostLike; // no type argument here
  readonly frontmatter?: Record<string, unknown>;
}

const { post: postProp, frontmatter }: Props = Astro.props;

// never mutate incoming props; derive a safe post object
const safePost = postProp?.data
  ? (postProp as unknown as CollectionEntry<"blog">)
  : ({ ...postProp, data: createDefaultPost(postProp) } as PostLike);

/**
 * Clamp a string to the range [min,max] at a word boundary.
 */
function clampText(input: string, min = 150, max = 170): string {
  const text = input.trim().replace(/\s+/g, " ");
  if (text.length <= max && text.length >= min) return text;
  if (text.length < min) return text; // avoid padding with fluff
  // cut at last space before max to keep words intact
  const cut = text.slice(0, max + 1);
  const idx = cut.lastIndexOf(" ");
  return (idx > 0 ? cut.slice(0, idx) : cut).trim();
}

const baseUrl = import.meta.env.BASE_URL ?? "/";

// title: prefer post/frontmatter, then setup fallback, with postfix
const rawTitle =
  (safePost.data?.linktitle as string | undefined) ||
  (frontmatter?.linktitle as string | undefined) ||
  setup?.title ||
  "";
const title = resolvePostTitle(rawTitle, { postfix: setup.head.postfix });

// description: prefer post, then setup.description
const rawDescription = safePost.data?.description ?? (setup?.description as string | undefined) ?? "";
const description = clampText(rawDescription);

// canonical with trailing slash enforced
const site = new URL(Astro.site ?? "http://localhost/");
const canonicalUrl = new URL(
  Astro.url.pathname.endsWith("/") ? Astro.url.pathname : `${Astro.url.pathname}/`,
  site,
).toString();

// robots policy
const isDraft = Boolean(safePost.data?.draft);
const robots = isDraft ? "noindex, nofollow, noarchive" : "index, follow";

// only emit <base> if BASE_URL is not root to avoid breaking relative paths
const shouldEmitBase = typeof baseUrl === "string" && baseUrl !== "/";
const headCfg = setup.head as Record<string, unknown>;

function getString(obj: Record<string, unknown>, key: string, fallback: string): string {
  const v = obj[key];
  return typeof v === "string" && v.trim() !== "" ? v : fallback;
}

const themeLight = getString(headCfg, "themeColorLight", "#ffffff");
const themeDark = getString(headCfg, "themeColorDark", "#000000");
---

<meta charset={setup.head?.defaults?.charset || "utf-8"} />
<meta
  name="viewport"
  content={setup.head?.defaults?.viewport || "width=device-width, initial-scale=1.0"}
/>
<title>{title}</title>

{
  shouldEmitBase && (
    <base
      href={baseUrl}
      target="_self"
    />
  )
}

<link
  rel="canonical"
  href={canonicalUrl}
/>
<meta
  name="robots"
  content={robots}
/>
<meta
  name="referrer"
  content="strict-origin-when-cross-origin"
/>
{
  description && (
    <meta
      name="description"
      content={description}
    />
  )
}
<meta
  name="color-scheme"
  content="dark light"
/>
<meta
  name="theme-color"
  media="(prefers-color-scheme: light)"
  content={themeLight}
/>
<meta
  name="theme-color"
  media="(prefers-color-scheme: dark)"
  content={themeDark}
/>

<FontsPreload />
<OpenGraph post={safePost} />
<ClientRouter />
<Favicon />
<Meta />
<WebComponents post={safePost} />

<meta
  name="generator"
  content={Astro.generator}
/>

{/* Matomo snippet (kept minimal; expand trackerUrl/siteId where you configure analytics) */}
<script is:inline>
  (function () {
    if (typeof window === "undefined") return;
    try {
      const _paq = (window._paq = window._paq || []);
      _paq.push(["setReferrerUrl", document.referrer]);
      _paq.push(["enableLinkTracking"]);
      _paq.push(["trackPageView"]); // initial load

      const onSwap = () => {
        _paq.push(["setCustomUrl", location.href]);
        _paq.push(["setDocumentTitle", document.title]);
        _paq.push(["trackPageView"]);
      };
      document.addEventListener("astro:after-swap", onSwap);
    } catch (err) {
      console.error("Matomo bootstrap failed:", err);
    }
  })();
</script>
