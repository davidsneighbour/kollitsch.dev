---
import { Icon } from 'astro-icon/components';

const {
  href,
  name,
  classes = '',
  theme = 'primary',
  size = 'base',
  disabled = false,
  outline = true,
  block = false,
} = Astro.props;

/**
 * Returns layout utility class if block mode is enabled.
 * @param block - Whether the button should stretch to fill its container
 */
function getBlockClasses(block: boolean = false): string {
  return block ? 'justify-self-stretch' : '';
}

/**
 * Returns theme-based classes for filled or outlined buttons.
 * @param theme - One of 'primary' | 'secondary' | 'contrast'
 * @param outline - If true, returns outlined version of the theme
 */
function getBaseClasses(
  theme: 'primary' | 'secondary' | 'contrast',
  outline = false,
): string {
  const filled = {
    primary: 'bg-red-600 hover:bg-red-800 text-white',
    secondary: 'bg-orange-600 hover:bg-orange-800 text-white',
    contrast:
      'dark:bg-gray-600 dark:hover:bg-gray-800 dark:text-white bg-gray-200 hover:bg-gray-400 text-gray-900',
  };

  const outlined = {
    primary:
      'border border-red-700 text-red-700 hover:bg-red-800 hover:text-white dark:border-red-500 dark:text-red-500 dark:hover:bg-red-600 dark:hover:text-white',
    secondary:
      'border border-orange-700 text-orange-700 hover:bg-orange-800 hover:text-white dark:border-orange-500 dark:text-orange-500 dark:hover:bg-orange-600 dark:hover:text-white',
    contrast:
      'border border-gray-800 text-gray-900 hover:bg-gray-900 hover:text-white dark:border-gray-600 dark:text-gray-400 dark:hover:bg-gray-600 dark:hover:text-white',
  };

  const themes = outline ? outlined : filled;
  return themes[theme] ?? themes.primary;
}

/**
 * Returns cursor class based on disabled state.
 * @param disabled - Whether the button is disabled (default: false)
 */
function getDisabledClasses(disabled: boolean = false): string {
  return disabled ? 'cursor-not-allowed' : 'cursor-pointer';
}

/**
 * Returns padding and font size classes based on the size variant.
 * @param size - One of 'xs' | 'sm' | 'base' | 'lg' | 'xl'
 */
function getSizeClasses(
  size: 'xs' | 'sm' | 'base' | 'lg' | 'xl' = 'base',
): string {
  const sizes: Record<string, string> = {
    xs: 'px-3 py-2 text-xs',
    sm: 'px-3 py-2 text-sm',
    base: 'px-5 py-2.5 text-sm',
    lg: 'px-5 py-3 text-base',
    xl: 'px-6 py-3.5 text-base',
  };

  // @ts-expect-error - TypeScript does not recognize the dynamic keys
  return sizes[size ?? 'base'] ?? sizes.base;
}

const baseClasses = `
  inline-flex items-center gap-x-2

  rounded-md

  ${getBaseClasses(theme, outline)}
  ${getSizeClasses(size ?? 'base')}

  shadow-xs

  focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-red-600
  transition-colors motion-reduce:transition-none
  delay-150 duration-(--kdev-transition-duration) ease-[--kdev-transition-function]

  active:scale-x-97 active:scale-y-98 transition-transform duration-150 motion-reduce:transition-none

  ${getBlockClasses(block)}
  ${getDisabledClasses(disabled)}
`.trim();
---

{
  href ? (
    <a
      href={href}
      class={`${baseClasses} ${classes}`}
    >
      <slot />
      {name && <Icon name={name} />}
    </a>
  ) : (
    <button
      type="button"
      class={`${baseClasses} ${classes}`}
    >
      <slot />
      {name && <Icon name={name} />}
    </button>
  )
}
