---
import navData from '@data/navigation.json';
const typedNavData = navData as Navigation;

import { fade } from 'astro:transitions';

import ThemeSelect from '@components/ThemeSelect.astro';
import { getHomepageUrl } from '@utils/getHomepageUrl';
import siteinfo from '@data/setup.json';
import { Icon } from 'astro-icon/components';
import ProgressBar from '@components/Progress.astro';

export type NavItem = {
  label: string;
  link: string;
  icon: string;
  match?: 'full' | 'prefix';
  matchPaths?: string[];
  children?: NavItem[];
};

export type Navigation = NavItem[];

export function isActive(item: NavItem, pathname: string): boolean {
  const matchType = item.match ?? 'full';
  const directMatch =
    matchType === 'full'
      ? pathname === item.link
      : pathname.startsWith(item.link);

  const extraMatches = item.matchPaths?.some((prefix) => pathname.startsWith(prefix)) ?? false;

  return directMatch || extraMatches;
}

export function findActive(nav: NavItem[], pathname: string): NavItem | null {
  for (const item of nav) {
    if (isActive(item, pathname)) return item;
    if (item.children) {
      const match = findActive(item.children, pathname);
      if (match) return match;
    }
  }
  return null;
}

const pathname = Astro.url.pathname;
const activeItem = findActive(typedNavData, pathname);

if (!activeItem && import.meta.env.DEV) {
  console.warn(`âš  No active navigation item for: ${pathname}`);
}

---

<header class="
  [--thickness:4px] lg:[--thickness:6px]
  sticky z-50 top-0 isolate
  bg-zinc-100 dark:bg-zinc-900
  mb-12
">
  <div class="backdrop z-10
    absolute inset-0
    backdrop-blur-lg
    pointer-events-none
    bg-gray-100 dark:bg-gray-900
  "></div>
  <div class="backdrop-edge z-10
    absolute bottom-0 left-0 right-0
    h-[var(--thickness)]
  ">
    <ProgressBar classes="progress z-40 relative [--height:var(--thickness)]" />
  </div>
  <div class="
    z-20 flex flex-wrap items-center gap-4 md:flex-nowrap md:items-start
    bg-zinc-100 text-gray-950 dark:bg-zinc-900 dark:text-gray-50
  ">
    <div class="order-1 flex-1 z-30" id="navbar-sitetitle">
      <a
        id="navbar-brand"
        href={getHomepageUrl()}
        class="font-changa flex-rows flex items-center gap-2 p-1.5 text-2xl opacity-0 transition-opacity duration-600 ease-in-out"
      >
        <Icon name="bi:house-fill" class="place-self-center" />
        {siteinfo.title}
      </a>
    </div>
    <div class="order-2 md:hidden z-30" id="hamburger-and-close">
      <Icon
        name="bi:list"
        class="is--mobile-menu-hamburger open-icon text-brand-500 dark:text-brand-400 place-self-center text-xl"
      />
      <Icon
        name="bi:x"
        class="is--mobile-menu-hamburger close-icon text-brand-500 dark:text-brand-400 hidden place-self-center text-xl"
      />
    </div>
    <div
      class="order-3 z-30 w-full justify-center self-center text-center md:order-2 md:ml-auto md:w-auto"
      id="navigation-and-theme-select"
    >
      <ul class="flex flex-col justify-center md:flex-row md:justify-end"
          transition:animate={fade({ duration: '0.4s' })}>
        {
          typedNavData.map(value => (
            <li class={`px-3 py-4 md:px-2 md:py-2 ${isActive(value, pathname) ? 'font-bold' : ''}`}>
              <a href={value.link} class="flex items-center gap-2">
                <Icon name={value.icon} />
                <span>{value.label}</span>
              </a>
            </li>
          ))
        }
        <li class="px-3 py-4 md:px-2 md:py-2"><ThemeSelect hideAuto /></li>
      </ul>
    </div>
  </div>
</header>

<script is:inline>
  // toggle mobile menu open/close state and icons
  window.kdev = window.kdev || {};
  window.kdev.mobileOpen = false;
  const closeIcon = document.querySelector('.close-icon');
  const openIcon = document.querySelector('.open-icon');
  const navSection = document.querySelector('#navigation-and-theme-select');

  const toggleIcons = () => {
    if (window.kdev.mobileOpen) {
      closeIcon?.classList.remove('hidden');
      openIcon?.classList.add('hidden');
    } else {
      closeIcon?.classList.add('hidden');
      openIcon?.classList.remove('hidden');
    }
  };
  const toggleNavVisibility = () => {
    if (!navSection) return;
    const isMdUp = window.matchMedia('(min-width: 768px)').matches;
    if (isMdUp) {
      navSection.classList.remove('hidden');
      navSection.classList.add('flex');
    } else {
      if (window.kdev.mobileOpen) {
        navSection.classList.remove('hidden');
        navSection.classList.add('flex');
      } else {
        navSection.classList.add('hidden');
        navSection.classList.remove('flex');
      }
    }
  };
  window.addEventListener('resize', toggleNavVisibility);
  const menuToggle = document.querySelector('#hamburger-and-close');
  if (menuToggle) {
    menuToggle.addEventListener('click', () => {
      window.kdev.mobileOpen = !window.kdev.mobileOpen;
      toggleIcons();
      toggleNavVisibility();
    });
  }
  toggleIcons();
  toggleNavVisibility();

  // hide/show sticky brand based on scroll position
  const placeholder = document.querySelector('h1#sitetitle');
  const stickyBrand = document.querySelector('#navbar-brand');
  if (!placeholder || !stickyBrand) {
    console.warn('Placeholder or sticky brand element not found.');
  } else {
    const observer = new IntersectionObserver(
      ([entry]) => {
        if (!entry) return;
        if (!entry.isIntersecting) {
          stickyBrand.classList.add('opacity-100');
          stickyBrand.classList.remove('opacity-0');
        } else {
          stickyBrand.classList.remove('opacity-100');
          stickyBrand.classList.add('opacity-0');
        }
      },
      { threshold: 0 },
    );
    observer.observe(placeholder);
    const isIntersecting =
      placeholder.getBoundingClientRect().top >= 0 &&
      placeholder.getBoundingClientRect().bottom > 0;
    if (!isIntersecting) {
      stickyBrand.classList.add('sticky-visible');
    } else {
      stickyBrand.classList.remove('sticky-visible');
    }
  }
</script>
