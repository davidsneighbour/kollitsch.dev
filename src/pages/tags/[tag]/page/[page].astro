---
// individual tag page with pagination, page 2+

import { getCollection, getEntry } from "astro:content";
import ArticleCard from "@components/ArticleCard.astro";
import Pagination from "@components/Pagination.astro";
import TagIntro from "@components/TagIntro.astro";
import Layout from "@layouts/DefaultPage.astro";

const { tag, page } = Astro.params;
const currentPage = Number(page);

import setup from "@data/setup.json" with { type: "json" };

const limit = setup.listpages?.limit || 12;

const pageSize = limit;

// Load and filter blog posts by tag
const allPosts = await getCollection("blog");
const taggedPosts = allPosts.filter((p) => p.data.tags?.includes(tag));

// Pagination logic
const totalPages = Math.ceil(taggedPosts.length / pageSize);
const start = (currentPage - 1) * pageSize;
const paginatedPosts = taggedPosts.slice(start, start + pageSize);

// Optional tag entry (for intro)
// Try to get the tag entry, but handle cases where getEntry or its result is undefined
let tagEntry = null;
try {
  const entry = await getEntry?.("tags", tag);
  tagEntry = entry ?? null;
} catch {
  tagEntry = null;
}

import { getValidTags } from "@utils/tags.ts";

export async function getStaticPaths() {
  const tagMap = await getValidTags();
  // @todo this should be configurable via setup.listpages.limit
  const pageSize = 12;

  const paths = [];
  for (const [tag, { count }] of tagMap.entries()) {
    const totalPages = Math.ceil(count / pageSize);
    for (let page = 2; page <= totalPages; page++) {
      paths.push({ params: { page: String(page), tag } });
    }
  }
  return paths;
}

const post = {
  data: {
    description: tagEntry?.data.description || `Posts tagged with #${tag}`,
    title: `#${tag} â€“ Page ${currentPage}`,
  },
};
---

<Layout post={post}>
  {
    tagEntry && currentPage === 1 && (
      <TagIntro
        title={tagEntry.data.label}
        description={
          tagEntry?.data.description || `Posts tagged with #${tagEntry.id}`
        }
      />
    )
  }

  {
    !tagEntry && currentPage === 1 && (
      <h1 class="mb-6 text-4xl font-bold">#{tag}</h1>
    )
  }
  <div
    class="grid grid-cols-1 gap-4 sm:grid-cols-2 xl:grid-cols-3 2xl:grid-cols-4"
  >
    {paginatedPosts.map(post => <ArticleCard post={post} />)}
  </div>

  <Pagination
    basePath={`/tags/${tag}/`}
    currentPage={currentPage}
    totalPages={totalPages}
    pagingPartial="/page/"
  />
</Layout>
